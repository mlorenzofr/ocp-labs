---
- name: 'Remove lab resources'
  hosts:
    - 'lab'

  gather_facts: false

  vars:
    dnsmasq_confd: '/etc/dnsmasq.d'
    lab_path: '/root/labs'
    libvirt_image_dir: '/home/libvirt-ocp'
    lab_appliance: false
    lab_platform: 'baremetal'

  tasks:
    - name: 'Test lab_name'
      ansible.builtin.fail:
        msg: 'Variable lab_name is empty'
      when: lab_name | length == 0

    - name: 'Prepare dnsmasq fileglob pattern'
      ansible.builtin.find:
        path: "{{ dnsmasq_confd }}/"
        patterns: "^{{ lab_name }}.*\\.conf$"
        use_regex: true
      register: clean_dnsmasq_files
      when: lab_platform == 'baremetal'

    - name: 'Remove dnsmasq snippets'
      notify: 'Restart dnsmasq service'
      ansible.builtin.file:
        path: "{{ item }}"
        state: 'absent'
      loop: "{{ clean_dnsmasq_files.files | map(attribute='path') }}"
      when: lab_platform == 'baremetal'

    - name: 'Remove AWS resources'
      ansible.builtin.command:
        cmd: "openshift-install destroy cluster --dir {{ lab_path }}/{{ lab_name }}/deploy --log-level debug"
      environment:
        PATH: '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin'
      when: lab_platform == 'aws'

    - name: 'Remove lab files'
      ansible.builtin.file:
        path: "{{ lab_path }}/{{ lab_name }}"
        state: 'absent'

    - name: 'Remove agent ISO image'
      ansible.builtin.file:
        path: "{{ libvirt_image_dir }}/{{ lab_name }}-agent-installer.iso"
        state: 'absent'

    - name: 'Remove agent ISO image (appliance)'
      ansible.builtin.file:
        path: "{{ libvirt_image_dir }}/{{ lab_name }}-agentconfig.iso"
        state: 'absent'
      when: lab_appliance

    - name: 'Prepare appliance-disks fileglob pattern'
      ansible.builtin.find:
        path: "{{ libvirt_image_dir }}/"
        patterns: "^{{ lab_name }}-.*\\.(raw|qcow2)$"
        use_regex: true
      register: clean_appliance_disks
      when: lab_appliance

    - name: 'Remove appliance disk images'
      ansible.builtin.file:
        path: "{{ item }}"
        state: 'absent'
      loop: "{{ clean_appliance_disks.files | map(attribute='path') }}"
      when: lab_appliance

    - name: 'Search kcli plan'
      ansible.builtin.shell:
        cmd: "kcli list plan -o name | grep -qE \"^\\['{{ lab_name }}',\""
      register: __kcli_plan
      changed_when: __kcli_plan.rc == 0
      failed_when: false
      when: lab_platform == 'baremetal'
      notify: 'Remove virtual machines'

  handlers:
    - name: 'Restart dnsmasq service'
      ansible.builtin.service:
        name: 'dnsmasq'
        state: 'restarted'

    # It doesn't work in the ansible module
    # Fix pending
    # - name: 'Remove virtual machines'
    #   karmab.kcli.kcli_plan:
    #     name: "{{ lab_name }}"
    #     state: 'absent'

    - name: 'Remove virtual machines'
      ansible.builtin.command:
        cmd: "kcli delete plan {{ lab_name }} -y"
