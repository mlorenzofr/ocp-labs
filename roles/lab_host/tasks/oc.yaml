---
- name: 'Test if oc is present'
  ansible.builtin.stat:
    path: "/usr/local/bin/oc-{{ item.version }}"
  register: __oc

- name: 'Use RHEL 8 oc binary'
  ansible.builtin.set_fact:
    lab_host_oc_source: 'openshift-client-linux-amd64-rhel8.tar.gz'
  when: >
    item.version is version('4.16.0', '>=') and
    ansible_distribution_major_version is version('9', '<')

- name: 'Use default oc binary'
  ansible.builtin.set_fact:
    lab_host_oc_source: 'openshift-client-linux.tar.gz'
  when: >
    item.version is version('4.16.0', '<')

- name: 'Download oc'
  ansible.builtin.unarchive:
    src: "{{ lab_host_ocp_mirror }}/{{ ansible_machine }}/clients/ocp/{{ item.version }}/{{ lab_host_oc_source }}"
    include: ['oc']
    remote_src: true
    dest: '/tmp/'
  when: not __oc.stat.exists and item.state != 'absent'

- name: 'Test oc downloaded file'
  ansible.builtin.stat:
    path: '/tmp/oc'
  register: __tmp_oc

- name: 'Move oc to /usr/local/bin'
  ansible.builtin.copy:
    src: '/tmp/oc'
    dest: "/usr/local/bin/oc-{{ item.version }}"
    owner: 'root'
    group: 'root'
    mode: '0755'
    remote_src: true
  when: __tmp_oc.stat.exists

- name: 'Remove oc temporal file'
  ansible.builtin.file:
    path: '/tmp/oc'
    state: 'absent'

- name: 'Add oc alternative'
  community.general.alternatives:
    name: 'oc'
    link: '/usr/local/bin/oc'
    path: "/usr/local/bin/oc-{{ item.version }}"
    state: "{{ item.state }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: 'Add kubectl alternative'
  community.general.alternatives:
    name: 'kubectl'
    link: '/usr/local/bin/kubectl'
    path: "/usr/local/bin/oc-{{ item.version }}"
    state: "{{ item.state }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: 'Remove oc'
  ansible.builtin.file:
    path: "/usr/local/bin/oc-{{ item.version }}"
    state: 'absent'
  when: item.state == 'absent'

- name: 'Test if openshift-install is present'
  ansible.builtin.stat:
    path: "/usr/local/bin/openshift-install-{{ item.version }}"
  register: __openshift_install

- name: 'Download openshift-install'
  ansible.builtin.unarchive:
    src: "{{ lab_host_ocp_mirror }}/{{ ansible_machine }}/clients/ocp/{{ item.version }}/openshift-install-linux.tar.gz"
    include: ['openshift-install']
    remote_src: true
    dest: '/tmp/'
  when: not __openshift_install.stat.exists and item.state != 'absent'

- name: 'Test openshift-install downloaded file'
  ansible.builtin.stat:
    path: '/tmp/openshift-install'
  register: __tmp_openshift_install

- name: 'Move openshift-install to /usr/local/bin'
  ansible.builtin.copy:
    src: '/tmp/openshift-install'
    dest: "/usr/local/bin/openshift-install-{{ item.version }}"
    owner: 'root'
    group: 'root'
    mode: '0755'
    remote_src: true
  when: __tmp_openshift_install.stat.exists

- name: 'Remove openshift-install temporal file'
  ansible.builtin.file:
    path: '/tmp/openshift-install'
    state: 'absent'

- name: 'Add openshift-install alternative'
  community.general.alternatives:
    name: 'openshift-install'
    link: '/usr/local/bin/openshift-install'
    path: "/usr/local/bin/openshift-install-{{ item.version }}"
    state: "{{ item.state }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: 'Remove openshift-install'
  ansible.builtin.file:
    path: "/usr/local/bin/openshift-install-{{ item.version }}"
    state: 'absent'
  when: item.state == 'absent'

- name: 'Test if oc-mirror is present'
  ansible.builtin.stat:
    path: "/usr/local/bin/oc-mirror-{{ item.version }}"
  register: __oc_mirror

- name: 'Download oc-mirror'
  ansible.builtin.unarchive:
    src: "{{ lab_host_ocp_mirror }}/{{ ansible_machine }}/clients/ocp/{{ item.version }}/oc-mirror.tar.gz"
    include: ['oc-mirror']
    remote_src: true
    dest: '/tmp/'
  when: not __oc_mirror.stat.exists and item.state != 'absent'

- name: 'Test oc-mirror downloaded file'
  ansible.builtin.stat:
    path: '/tmp/oc-mirror'
  register: __tmp_oc_mirror

- name: 'Move oc-mirror to /usr/local/bin'
  ansible.builtin.copy:
    src: '/tmp/oc-mirror'
    dest: "/usr/local/bin/oc-mirror-{{ item.version }}"
    owner: 'root'
    group: 'root'
    mode: '0755'
    remote_src: true
  when: __tmp_oc_mirror.stat.exists

- name: 'Remove oc-mirror temporal file'
  ansible.builtin.file:
    path: '/tmp/oc-mirror'
    state: 'absent'

- name: 'Add oc-mirror alternative'
  community.general.alternatives:
    name: 'oc-mirror'
    link: '/usr/local/bin/oc-mirror'
    path: "/usr/local/bin/oc-mirror-{{ item.version }}"
    state: "{{ item.state }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: 'Remove oc-mirror'
  ansible.builtin.file:
    path: "/usr/local/bin/oc-mirror-{{ item.version }}"
    state: 'absent'
  when: item.state == 'absent'
...
